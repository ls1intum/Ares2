package %s.aspectconfiguration.java.instrumentation;

/**
 * Configuration settings for Java instrumentation aspect configurations.
 * <p>
 * This class holds the static configuration settings used by Java instrumentation aspects,
 * such as allowed file paths, network hosts and ports, command executions, and thread creations.
 * These settings are used to control and manage various security-related behaviors in the application.
 * </p>
 * <p>
 * As a utility class, it is not intended to be instantiated.
 * </p>
 *
 * @version 2.0.0
 * @since 2.0.0
 */
public class JavaInstrumentationConfigurationSettings {

    /**
     * Private constructor to prevent instantiation of this utility class.
     * <p>
     * The constructor throws an {@link IllegalStateException} to enforce the utility class pattern.
     * </p>
     */
    private JavaInstrumentationConfigurationSettings() {
        throw new IllegalStateException("Utility class");
    }

    private static final String RESTRICTED_PACKAGE = "de.tum.cit.ase.ares";
    private static final String[] ALLOWED_LISTED_CLASSES = {
        "de.tum.cit.ase.ares.api.aspectconfiguration.java.instrumentation.JavaInstrumentationConfigurationSettings",
        "de.tum.cit.ase.ares.api.aspectconfiguration.instrumentation.adviceAndPointcut.JavaInstrumentationAdviceToolbox",
        "de.tum.cit.ase.ares.api.aspectconfiguration.instrumentation.adviceAndPointcut.JavaInstrumentationReadPathAdvice",
        "de.tum.cit.ase.ares.api.aspectconfiguration.instrumentation.adviceAndPointcut.JavaWritePathAdvice",
        "de.tum.cit.ase.ares.api.aspectconfiguration.instrumentation.adviceAndPointcut.JavaInstrumentationExecutePathAdvice",
        "de.tum.cit.ase.ares.api.aspectconfiguration.java.pointcut.instrumentation.JavaInstrumentationPointcutDefinitions",
        "de.tum.cit.ase.ares.api.aspectconfiguration.java.pointcut.instrumentation.JavaInstrumentationBindingDefinitions",
        "de.tum.cit.ase.ares.api.aspectconfiguration.java.instrumentation.JavaInstrumentationAgent"
    };